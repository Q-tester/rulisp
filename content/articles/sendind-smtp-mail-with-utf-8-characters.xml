<?xml version="1.0" encoding="utf-8"?>

<page xmlns:xlink="http://www.w3.org/1999/xlink"
      xlink:title="Отпавка эллектронного письма в кодироке utf-8"
      xlink:href="http://lisp-univ-etc.blogspot.com/2009/02/sendind-smtp-mail-with-utf-8-characters.html">

    <author xlink:title="Всеволод Дёмкин" xlink:href="http://lisp-univ-etc.blogspot.com/" />

    <p>В этой заметке исследуется тема отправки закодированного в base64 письма (с русским оригиналом) по SMTP. Из Common Lisp с помощью открытых библиотек (не Franz инфраструктуры). Как оказалось, для этого нужно задействовать целых 4 библотеки, не сильно документированные, поэтому я решил записать, как с ними расправиться...</p>

    <h3>CL-SMTP</h3>
    <p>Изначально, кроме HELO и EHLO я мало что знал об SMTP протоколе. Свое изучение его я начал с того, что попробовал решить задачу в лоб с помощью функции SEND-EMAIL [1]. Функция не документированна (по идее, должны быть все итак понятно :) и не сигнализирует собственных ошибок, а просто прокидывает ошибки от USOCKET'а, на который она опирается. Однако, есть все же один способ отладки в CL-SMTP с помощью <code>(setf cl-smtp::*debug* t)</code> [2]</p>
    <p>Собственно, почему мне понадобилась отладка, так это из-за того, что вот это работало:</p>
    <code>
        (cl-smtp:send-email "localhost"
                            "noreply@our.domain.net"
                            "test@gmail.com"
                            "subject"
                            "test")
    </code>
    а вот это выдавало USOCKET:UKNOWN-ERROR [2]:
    <code>
        (cl-smtp:send-email "localhost"
                            "noreply@our.domain.net"
                            "test@gmail.com"
                            "subject"
                            "тест")
    </code>
    <blockquote>(Пояснение: отправляем пичьмо с темой "subject" от noreply@our.domain.net на test@gmail.com через localhost)</blockquote>

    Оказалось, что SMTP-сервер не принимает не ascii символы в теле письма, потому что кодировкой по умолчанию является <b>7bit</b>.

    <h3>CL-MIME</h3>
    <p>В общем, пришлось спросить Google, который ответил <a href="http://netzhansa.blogspot.com/2008/03/feature-development-and-getting-carried.html">вот этой статьей</a> от Ханса Хюбнера, в которой он объясняет свои доработки к CL-SMTP, которые сейчас уже интегрированны в библиотеку. Для их правильного применения нужно разобраться с тем, как работает <a href="http://en.wikipedia.org/wiki/MIME">MIME</a>. В примере Ханс использует <b>multipart/mixed</b> Content-type для отсылки писем с вложенями. Но для нашей простой задачи отправки письма с русским текстом в кодировке UTF-8 это не обязательно. Сгодится и <b>text/plain</b>, но для того, чтобы SMTP-сервера принимали не-ascii символы, нужно использовать другой <b>Content-encoding</b>: base64. А управляется весь этот механизм с помощью библиотеки CL-MIME. В данном случае она вполне самодокументированна, поэтому отсутствие полноценной документации не влияет на возможности ее использования.</p>

    <p>Для формирования данных в нужном нам кодировании используется функция PRINT-MIME [4], которая берет на вход CLOS-объект MIME с заданными полями. Единственная проблема с ней в том, что результирующие данные содержат как то, что должно пойти в тело письма, так и некоторые SMTP-заголовки. Поэтому ее вывод не может использоваться как аргумент для SEND-EMAIL: заголовки попадут в тело пиьсма (будут разделены новой строкой) и не будут учитываться на серверах. Для этого и других случаев, когда нужен больший контроль над процессом SMTP взаимодействия, Ханс ввел высокоуровневый макрос WITH-SMTP-MAIL [5]. У него есть небольшое отлтичие от SEND-EMAIL: вместо одного получателя (в виде строки e-mail адреса), он принимает список получателей.</p>

    <h3>CL-BASE64 и ARNESI</h3>
    <p>Однако, что мне доставило больше всего хлопот &#151; это неочевидная обработка инитарга :CONTENT [6] для MIME-объектов. Если задан инитарг :ENCODING, например, :BASE64, :CONTENT будет поддан соответствуемуму кодированию (которое выполняется для данной кодировки с помощью библиотеки CL-BASE64). Интересно, что это даст неверные данные для UTF-8 строк. Правильный формат этого аргумента не строка, а <b>octet array</b>.</p>

    <p>Т.е. нужна функция, чтобы привести строку к нему. Для этого можно задействовать библиотеку ARNESI, которая является собранием разнообразных утилит. Она как раз предоставляет такую функциональность через функцию STRING-TO-OCTETS [7].</p>

    <p>Стоит также заметить, что если не-ascii символы будут присутствовать в теле письма (с правильным Contnet-encoding, т.е. не 7bit), они могут быть отправлены и так. Однако, конечно, наиболее работоспособный вариант для любой ситуации &#151; использовать данные, закодированные в base64. </p>

    <h3>Результат</h3>
    Короче говоря, в итоге у нас получилось нечто в этом духе:
    <code>
        (defun send-email (text &amp;rest reciepients)
          "Generic send SMTP mail with some TEXT to RECIEPIENTS"
          (cl-smtp:with-smtp-mail (out "localhost" "noreply@fin-ack.com" reciepients)
            (cl-mime:print-mime out
                                (make-instance 'cl-mime:text-mime
                                               :encoding :base64
                                               :charset "UTF-8"
                                               :content (arnesi:string-to-octets text :utf-8))
                                t t)))
    </code>

    <h3>Уроки</h3>
    <ol>
        <li>Чтобы отправить обычное письмо с ascii символами по SMTP можно использовать CL-SMTP:SEND-EMAIL</li>
        <li>Если сигнализируется ошибка USOCKET:UKNOWN-ERROR, скорее всего проблема с форматом аргументов</li>
        <li>А детально разобраться в этом можно, установив (setf cl-smtp::*debug* t)</li>
        <li>Чтобы использовать MIME, лучше подойдет CL-SMTP:WITH-SMTP-EMAIL в паре с CL-MIME:PRINT-MIME</li>
        <li>Для CL-MIME:TEXT-MIME's инитарга :CONTENT нужен вектор октетов, а не строка</li>
        <li>Для преобразования UTF-8 строки в вектор октетов можно задействовать ARNESI:STRING-TO-OCTETS</li>
    </ol>
    
    
</page>